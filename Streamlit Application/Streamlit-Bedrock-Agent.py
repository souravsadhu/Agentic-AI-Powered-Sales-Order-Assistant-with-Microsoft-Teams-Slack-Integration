import boto3
import streamlit as st
from requests import request
import requests
import json
import base64
import uuid
import pprint
import logging
import io


# Streamlit CSS
custom_css = """
    <style>
        .text-with-bg {
        color: white;
            background-color: #1c2e4a; /* Change this to your desired background color */
            padding: 10px;
            border-radius: 5px;
        }
    </style>
"""

col1, col2, col3 = st.columns([1,1,1])
with col1:
    st.write("")
with col2:
    st.image("Amazon_Web_Services-Logo.png")
with col3:
    st.write("")

# Streamlit App Layout
st.title('Business Query System')
st.subheader('Powered by Amazon Bedrock Agents and Knowledge bases')
st.info("**DISCLAIMER:** This demo uses an Amazon Bedrock foundation model and is not intended to collect any personally identifiable information (PII) from users. Please do not provide any PII when interacting with this demo. The content generated by this demo is for informational purposes only.")
idp_logo = "bedrock_logo.png"
st.sidebar.image(idp_logo, width=500, output_format='PNG')
st.sidebar.markdown(custom_css, unsafe_allow_html=True)
st.sidebar.subheader('**About this Demo**')
st.sidebar.markdown('<p class="text-with-bg">  Virtual assistant for SAP, Non-SAP Systems  and enterprise knowledge base</p>', unsafe_allow_html=True)
st.sidebar.markdown('<p class="text-with-bg"> Knowledge Base for Amazon Bedrock - File Upload. </p>', unsafe_allow_html=True)

  # --- Bedrock Knowledge Base Update ---
agent_client = boto3.client('bedrock-agent')
s3_client = boto3.client('s3')
knowledgeBaseId = "TCVJ94NSK1"
dataSourceId = "DLFFA3VK6X"

def update_knowledge_base(file_content, bucket_name, s3_file_name):

    try:
        # Wrap the bytes content in an in-memory file-like object
        file_obj = io.BytesIO(file_content)

        s3_client.upload_fileobj(file_obj, bucket_name, s3_file_name)
        st.sidebar.success(f"File uploaded successfully to S3 bucket '{bucket_name}' as '{s3_file_name}'")
    except Exception as e:
        st.error(f"Error uploading file to S3: {e}")
        return

    # Start ingestion job
    description = "Programmatic update of Bedrock Knowledge Base Data Source"

    try:
        response = agent_client.start_ingestion_job(
            dataSourceId=dataSourceId,
            description=description,
            knowledgeBaseId=knowledgeBaseId
        )
    except Exception as e:
        st.error(f"Error starting ingestion job: {e}")
    finally:
        file_obj.close()  # Close the file-like object after upload

def check_ingestion_job_status():
    headers = {
        "Content-type": "application/json",
        # Add any necessary headers here
    }

    status = ""
    while status != "complete":
        try:
            response = agent_client.list_ingestion_jobs(
                knowledgeBaseId=knowledgeBaseId,
                dataSourceId=dataSourceId,
            )

            if response['ResponseMetadata']['HTTPStatusCode'] == 200:
                job_status = response["ingestionJobSummaries"][0]["status"]

                if job_status == "COMPLETE":
                    st.sidebar.success(f"Knowledge Base update: {job_status}")
                    break
            else:
                st.write(f"Error: {response.status_code} - {response.text}")
        except Exception as e:
            st.write(f"An error occurred: {e}")


def show_pdf(uploaded_file):
    # Display PDF preview
    st.sidebar.subheader("PDF Preview")
    pdf_display = f'<iframe src="data:application/pdf;base64,{base64.b64encode(uploaded_file.read()).decode("utf-8")}" width="100%" height="500"></iframe>'
    st.sidebar.markdown(pdf_display, unsafe_allow_html=True)



def process_uploaded_file(uploaded_file):
    file_name = uploaded_file.name.lower()
    file_extension = file_name.split(".")[-1]

    file_contents = None

    if file_extension == "docx":
        show_docx(uploaded_file)
        docx_content = extract_text_from_docx(uploaded_file)
        file_contents = docx_content.encode("utf-8") if docx_content else None
    elif file_extension == "pdf":
        show_pdf(uploaded_file)
        file_contents = uploaded_file.getvalue()

    return file_contents



# Getting S4 credentials from Secrets Manager
client = boto3.client("secretsmanager", region_name="us-east-1")
bedrock_agent_client = boto3.client('bedrock-agent')
bedrock_agent_runtime_client = boto3.client('bedrock-agent-runtime')
logging.basicConfig(format='[%(asctime)s] p%(process)s {%(filename)s:%(lineno)d} %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

get_secret_value_response = client.get_secret_value(
        SecretId="S4_credentials"
)

secret = get_secret_value_response['SecretString']
secret = json.loads(secret)

s4_username = secret.get('S4_username')
s4_password = secret.get('S4_password')

def simple_agent_invoke(input_text, agent_id, agent_alias_id, session_id=None, enable_trace=False, end_session=False):
    agentResponse = bedrock_agent_runtime_client.invoke_agent(
        inputText=input_text,
        agentId=agent_id,
        agentAliasId=agent_alias_id,
        sessionId=session_id,
        enableTrace=enable_trace,
        endSession= end_session
    )

    event_stream = agentResponse['completion']
    try:
        for event in event_stream:
            if 'chunk' in event:
                data = event['chunk']['bytes']
                agent_answer = data.decode('utf8')
                end_event_received = True  # End event indicates that the request finished successfully
            elif 'trace' in event:
                logger.info(json.dumps(event['trace'], indent=2))
            else:
                raise Exception("unexpected event.", event)
    except Exception as e:
        raise Exception("unexpected event.", e)

    return(agent_answer)


def main():

    uploaded_file = st.sidebar.file_uploader("Upload Document", type=["pdf"])

    if uploaded_file is not None:
        if uploaded_file != st.session_state.get("uploaded_file"):
            st.session_state["uploaded_file"] = uploaded_file


            knowledge_base_s3_bucket = "kbsrv"
            file_name = uploaded_file.name
            file_contents = process_uploaded_file(uploaded_file)
            update_knowledge_base(file_contents, knowledge_base_s3_bucket, file_name)
            check_ingestion_job_status()


    agent_name = "Business-Query-System"
    agent_role_name = "AmazonBedrockExecutionRoleForAgents_5GTIA0W4Q"
    agent_foundation_model = "anthropic.claude-3-sonnet-20240229-v1:0"
    agent_description = "One stop solution to answer business queries from SAP and Non-SAP system"
    agent_instruction = "You are an AI assistant helping users in querying SAP sales data directly from SAP system. You also help users with general queries about SAP business process from the company knowledge base."
    agent_id = "VX5FAWE3OO"
    agent_alias_id = "VG92WRF1JI"


    query = st.text_input("**User Input**", value="", placeholder="How can I help you today?", label_visibility="visible")

    if st.button('Submit Query'):

        session = boto3.session.Session()

        session_id:str = str(uuid.uuid1())
        enable_trace:bool = False
        end_session:bool = False

        response = simple_agent_invoke(query , agent_id, agent_alias_id, session_id)

        st.write(" System's Response:", response)


if __name__ == "__main__":
    main()